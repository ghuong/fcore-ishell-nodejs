
describe("puretester", () => {

  const { fail } = require("assert");

  const puretester = require("../../ishell/puretester");

  function checkPuretester(dir, mode, shouldBePure = true) {
    const { files, filepaths } = puretester.setup(dir);

    const { failMsg } = puretester.runPuretests(
      filepaths,
      files,
      mode
    );

    if (shouldBePure && failMsg) {
      fail(`Pure module '${file}' marked as impure`);
    } else if (!shouldBePure && !failMsg) {
      fail(`Impure module '${file}' marked as pure`);
    }
  }

  function checkPuretesterSandboxMode(dir, rewriteDir, shouldBePure = true) {
    const { files, filepaths } = puretester.setup(dir);

    const sandboxedModules = puretester.rewriteModulesIntoSandboxes(files, dir, rewriteDir);

    const { failMsg } = puretester.runPuretests(
      sandboxedModules,
      files
    );

    if (shouldBePure && failMsg) {
      fail(`Pure module marked as impure`);
    } else if (!shouldBePure && !failMsg) {
      fail(`Impure module marked as pure`);
    }
  }

  it("works in 'hasArgs' mode on pure methods", () => {
    const dir = `${__dirname}/testmodules/hasArgs/pure`;
    checkPuretester(dir, puretester.testModes.hasArgs);
  });

  it("works in 'hasArgs' mode on impure methods", () => {
    const dir = `${__dirname}/testmodules/hasArgs/impure`;
    checkPuretester(dir, puretester.testModes.hasArgs, false);
  });

  it("works in 'returnsValue' mode on pure methods", () => {
    const dir = `${__dirname}/testmodules/returnsValue/pure`;
    checkPuretester(dir, puretester.testModes.returnsValue);
  });

  it("works in 'returnsValue' mode on impure methods", () => {
    const dir = `${__dirname}/testmodules/returnsValue/impure`;
    checkPuretester(dir, puretester.testModes.returnsValue, false);
  });

  it("works in 'isPureExpression' mode on pure methods", () => {
    const dir = `${__dirname}/testmodules/isPureExpression/pure`;
    checkPuretester(dir, puretester.testModes.isPureExpression);
  });

  it("works in 'isPureExpression' mode on impure methods", () => {
    const dir = `${__dirname}/testmodules/isPureExpression/impure`;
    checkPuretester(dir, puretester.testModes.isPureExpression, false);
  });

  it("works in 'runsInSandbox' mode on pure methods", () => {
    const dir = `${__dirname}/testmodules/runsInSandbox/pure`;
    const rewriteDir = `${__dirname}/testmodules/runsInSandbox/pure/.rewrite`;
    checkPuretesterSandboxMode(dir, rewriteDir);
    puretester.teardown(rewriteDir);
  });

  it("works in 'runsInSandbox' mode on impure methods", () => {
    const dir = `${__dirname}/testmodules/runsInSandbox/impure`;
    const rewriteDir = `${__dirname}/testmodules/runsInSandbox/impure/.rewrite`;
    checkPuretesterSandboxMode(dir, rewriteDir, false);
    puretester.teardown(rewriteDir);
  });
});